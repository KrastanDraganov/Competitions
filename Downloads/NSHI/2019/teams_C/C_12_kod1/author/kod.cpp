#include <iostream>
#include <algorithm>
#include <string>
using namespace std;

string sKod,sCis;

void Prowerka1 (string s) {
int i,j,d,Gr[5001],bGr,bf=0,NacGr;
char cMin,cMinT;
bool fl[10],Fl;
string ss;

  s='a'+s;
	d=s.size();
	bGr=1;
	Gr[1]=d;
	fill(fl,fl+10,false);
	for (i=d-1;i>=1;i--) {				// Образува групите отзад->напред.
		if (!fl[s[i]-'0']) {	
			bf++;
			fl[s[i]-'0']=true;
			if (bf==10) 
			 	if (i>1){					// Ако в най-лявата група се срещат всички цифри
					bGr++;					// тя не се добавя.
					Gr[bGr]=i;
					fill(fl,fl+10,false);
					bf=0;
				}
		}
	}
 	cMin='0';	  	
	if (0<bf&&bf<10) {      			// Намира най-малкото липсващо число от първата група
	 for (i=1;i<10;i++) 					// ако тя не е "пълна", т.е. липсва поне една цифра.
	 	if (!fl[i]) {
	 		cMin=i+'0';
	 		break;
	 	}
	}
	if (cMin=='0') {						// Случай, когато в първата група има всички числа от 0 до 9
 		bGr++;								// или в първата група липсва само нулата.
		Gr[bGr]=1;							// Тогава се добавя първата група и се започва проерката от нея.
	 	cMin='1';						
	}

	ss=ss+cMin;
// ----------------------------- 
// Търсене на числата по групите
// ----------------------------- 
	for (i=bGr;i>=2;i--) {
		fill(fl,fl+10,false);
		Fl=false;
		for (j=Gr[i];j<=Gr[i-1]-1;j++)
		 if (!Fl) {
		 	if (s[j]==cMin)
		 		Fl=true;
		 }
		 else
		 if (Fl)
		 	fl[s[j]-'0']=true;
		cMinT='A';
		for (j=0;j<10;j++)					
		 if (!fl[j]) {							
		 	cMinT=j+'0';							
		 	break;
		 }
		if (cMinT=='A') 							// Случай, когато всички fl[i] са false.
			cMin='0';								// Това е възможно само, ако числото, което
			else										// се търси е 0
			cMin=cMinT;
		ss=ss+cMin;	    
	}
	sCis=ss;
}

int main () {

string sK;
	cin>>sK;											// Въвежда кода
	Prowerka1(sK);									// Влиза с КОД-а
	cout<<sCis<<endl;								// Отпечатва номера, съответстващ на КОД-а

  return 0;
}

/*
12332401567890123456789

   987654321123456789 9876543210
   123456789012345678 9012345678
======================================
 110 
   1023456789 0123456789
 N=0123456789 0123456789
====================================== 

//  s="123540123467895012346789012345678912345006789";			// 45501
//		s="91012345678";
//   123 54012346789 5012346789 0123456789 12345006789
//   123 45678901234 5678901234 5678901234 56789012345
//  s="13492012356745678";  							// 29
//	s="10234567890123456789";								// 110
//	s="62583090417028884039886135934572615894909090625947338169672344";  

*/   


