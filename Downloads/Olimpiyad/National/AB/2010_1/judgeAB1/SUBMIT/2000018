#include <iostream>
#include <algorithm>

using namespace std;


bool usedPrime[1000100];

void fact(int a, int primes[], int &n)
{
     for (int prime = 2; prime <= a && a > 1; prime++)
     {
         while (a % prime == 0)
         {
               a /= prime;
               if (n == 0 || primes[n - 1] != prime)
               {
                     primes[n++] = prime;
                     usedPrime[prime] = 1;
               }
         }
     }
}

int setMask(int a, int primes[], int n)
{
    int result = 0;
    for (int i = 0; i < n; i++)
    {
        if (a % primes[i] == 0)
        {
              result |= (1<<i);
        }
    }
    return result;
}

void print(int a, int n)
{
     for (int i = 0; i < n; i++)
     {
         if (a & (1<<i))
         {
             cout<<1;
         }
         else
         {
             cout<<0;
         }
     }
     cout<<"\n";
}

void print(int arr[], int n)
{
     for (int i = 0; i < n; i++)
     {
         cout<<arr[i]<<" ";
     }
     cout<<"\n";
}

int mask[10];
int cntBits[30];
long long num[10];
int primes[32], n;

bool notPrime[100100];

void addPrimes()
{
     int added = 0;
     for (int p = 2; p <= 100000; p++)
     {
         if (!notPrime[p])
         {
                          if (!usedPrime[p])
                          {
                                            primes[n++] = p;
                                            added++;
                                            if (added >= 3)
                                            {
                                               return;
                                            }
                          }
         }
         for (long long i = p * p; i <= 100000; i += p)
         {
             notPrime[i] = 1;
         }
     }
}

bool checkTriple(int a, int b, int c)
{
     if (__gcd(__gcd(a, b), c) > 1)
     {
                  return 0;
     }
     if (__gcd(a, b) == 1 && __gcd(b, c) == 1 && __gcd(a, c) == 1)
     {
                  return 0;
     }
     return 1;
}

bool checkIndex(int i)
{
//     for (int i = index; i >= 0; i--)
     {
         for (int j = i - 1; j >= 0; j--)
         {
             for (int k = j - 1; k >= 0; k--)
             {
                 if (!checkTriple(num[i], num[j], num[k]))
                 {
                                          return 0;
                 }
             }
         }
     }
     return 1;
}

bool checkAll()
{
     for (int i = 2; i < 6; i++)
     {
         if (!checkIndex(i))
         {
                            return 0;
         }
     }
     return 1;
}

bool finished;
long long ans[10];
long long curSum;
long long sum = 0;

void backtrack(int index, int bit)
{
     if (bit == n)
     {
             curSum += num[index];
             if (curSum >= sum)
             {
                        curSum -= num[index];
                        return;
             }
             if (checkIndex(index))
             {
                 backtrack(index + 1, 0);
             }
             curSum -= num[index];
             return;
     }
     if (index == 6)
     {
               if (checkAll())
               {
                              finished = 1;
                              if (curSum < sum)
                              {
                                  sum = curSum;
                                  ans[3] = num[3];
                                  ans[4] = num[4];
                                  ans[5] = num[5];
                              }
                            //  cout<<num[3]<<" "<<num[4]<<" "<<num[5]<<"\n";
               }
               return;
     }
     mask[index] |= 1 << bit; num[index] *= primes[bit];
     cntBits[bit]++;
     if (cntBits[bit] < 3)
     {
                           backtrack(index, bit + 1);
     }
     mask[index] ^= 1<<bit; num[index] /= primes[bit];
     cntBits[bit]--;
     backtrack(index, bit + 1);
}

void solve()
{
    int a,b,c;
    scanf("%d%d%d", &a, &b, &c);
    memset(usedPrime, 0, sizeof(usedPrime));
    memset(cntBits, 0, sizeof(cntBits));
    
    n = 0;
    fact(a, primes, n);
    fact(b, primes, n);
    fact(c, primes, n);
    addPrimes();
    sort(primes, primes + n);
    n = unique(primes, primes + n) - primes;
    
    mask[0] = setMask(a, primes, n);
    num[0] = a;
    mask[1] = setMask(b, primes, n);
    num[1] = b;
    mask[2] = setMask(c, primes, n);
    num[2] = c;
    for (int i = 0; i < 3; i++)
    {
        for (int j = 0; j < n; j++)
        {
            if (mask[i] & (1<<j))
            {
                         cntBits[j]++;
            }
        }
    }
    
    finished = 0;
    num[3] = num[4] = num[5] = 1;
    sum = 2000000000000000LL;
    curSum = 0;
    backtrack(3, 0);
    if (!finished)
    {
                  printf("0\n");
    }
    else
    {
                  cout<<ans[3]<<" "<<ans[4]<<" "<<ans[5]<<"\n";
    }
    memcpy(num + 3, ans + 3, sizeof(ans[0])*3);
  //  cout<<checkAll()<<"\n";
}

int main()
{
    solve();
    solve();
    //system("pause");
    return 0;
}
